#定义开启的用户，在编译rpm的时候已经设置，此处可以忽略
#user  nobody;

#nginx 启动内核的进程数，和服务器内核数相关
#复制此命令可以查看服务器内核数[lscpu | awk  '/^CPU\(s\)/{print $2}']
worker_processes  1;

#定义error_log的存放位置
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#每个进程可以处理的最大文件数，和服务器的最大文件打开数相关
events {
    worker_connections  1024;
}

#设置nginx的网页访问
http {
    include       mime.types;
	#nginx 的默认文件类型
    default_type  application/octet-stream;
	#nginx 的日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
	
 	#是否采用sendfile进行复制，sendfile复制数据是内核级别完成的，速度快
    sendfile        on;
	
    #开启后服务器的响应头部信息产生独立的数据包发送，即一个响应信息一个包
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #保持连接的超时时间
    keepalive_timeout  65;
	
	#优化1.隐藏nginx的版本号信息
	server_tokens off;
	
    #优化2.采用压缩功能，将页面压缩后传输节省流量(多媒体视频、音频不在此压缩)
    gzip  on;
	gzip_min_length 1000;
	gzip_comp_level 3;
	#关于那些需要压缩，可以参考conf下的mime.types
	gzip_types text/plain text/css application/json;

	#优化3.防止长连接
	client_header_buffer_size 1k;
	large_client_header_buffers 4 4k;

	#优化4.服务器内存缓存
	open_file_cache max=2000 inactive=20s;
	open_file_cache_min_uses 5;
	open_file_cache_vaild 60s;
	open_file_cache_errors off;

    server {
	 	#默认的端口号和域名的设置
        listen       80;
        server_name  www.example.com;
		
		#编码格式
        charset utf-8;

        #access_log  logs/host.access.log  main;

		#优化5.设置status页面，查看运行状态,需要模块为http_stub_status_module
		location /status {
			stub_status on;
			allow 1.1.1.1 ;
			deny all;
		}

		#优化6. 设置客户端的页面缓存
		location \.(jpg|gif|png|ico|mp4|mp3)$ {
			expires 7d;
		}
		
		#设置默认网页的存放位置
        location / {
            root   html;
            index  index.html index.htm;
        }
		
		#优化7.设置404页面
        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        
		#动态网页需要修改的位置
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi.conf;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        
        location ~ /\.ht {
            deny  all;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

	#设置https加密,需要的模块http_ssl_module
	#生成秘钥对"openssl genrsa > cert.key
	#"openssl req -new -x509 -key cert.key > cert.pem
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
